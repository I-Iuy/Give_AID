@model IEnumerable<Fe.DTOs.Comment.CommentDashboardDto>
@{
    ViewData["Title"] = "Comments Management";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">

<div class="container-fluid px-4">
    <h1 class="mt-4">Comments Management</h1>
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            Comments List
        </div>
        <div class="card-body">
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["Error"]
                </div>
            }

            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th>ID</th>
                        <th>Content</th>
                        <th>User</th>
                        <th>Campaign</th>
                        <th>Created At</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var comment in Model)
                    {
                        <tr>
                            <td>@comment.CommentId</td>
                            <td>@comment.Content</td>
                            <td>@(comment.IsAnonymous ? "Anonymous" : comment.GuestName)</td>
                            <td>Campaign #@comment.CampaignId</td>
                            <td>@comment.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>
                                @if (comment.IsReplied)
                                {
                                    <span class="badge bg-success">Replied</span>
                                }
                                else
                                {
                                    <span class="badge bg-warning">Pending</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-primary btn-sm reply-btn" 
                                        data-comment-id="@comment.CommentId"
                                        data-bs-toggle="modal" 
                                        data-bs-target="#replyModal">
                                    <i class="fas fa-reply"></i> Reply
                                </button>
                                <button class="btn btn-danger btn-sm delete-btn" 
                                        data-comment-id="@comment.CommentId">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            @if (ViewBag.TotalPages > 1)
            {
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center">
                        @if (ViewBag.HasPreviousPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage - 1 })">
                                    <i class="fas fa-chevron-left"></i> Previous
                                </a>
                            </li>
                        }

                        @for (int i = 1; i <= ViewBag.TotalPages; i++)
                        {
                            <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                            </li>
                        }

                        @if (ViewBag.HasNextPage)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", new { page = ViewBag.CurrentPage + 1 })">
                                    Next <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        }
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

<!-- Reply Modal -->
<div class="modal fade" id="replyModal" tabindex="-1" aria-labelledby="replyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="replyModalLabel">Reply to Comment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="replyForm">
                    <input type="hidden" id="commentId" name="id" />
                    <div class="mb-3">
                        <label for="replyContent" class="form-label">Your Reply</label>
                        <textarea class="form-control" id="replyContent" name="content" rows="3" required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="submitReply">
                    <i class="fas fa-paper-plane"></i> Submit Reply
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Handle reply button click
            document.querySelectorAll('.reply-btn').forEach(function(button) {
                button.addEventListener('click', function() {
                    var commentId = this.getAttribute('data-comment-id');
                    document.getElementById('commentId').value = commentId;
                    document.getElementById('replyContent').value = ''; // Clear previous content
                });
            });

            // Handle reply submission
            document.getElementById('submitReply').addEventListener('click', function() {
                var id = document.getElementById('commentId').value;
                var content = document.getElementById('replyContent').value;

                if (!content.trim()) {
                    alert('Please enter a reply.');
                    return;
                }

                fetch('@Url.Action("Reply")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: new URLSearchParams({
                        'id': id,
                        'content': content
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        var modal = bootstrap.Modal.getInstance(document.getElementById('replyModal'));
                        modal.hide();
                        
                        // Update UI without reload
                        var row = document.querySelector(`button[data-comment-id="${id}"]`).closest('tr');
                        var statusCell = row.querySelector('td:nth-child(6)');
                        statusCell.innerHTML = '<span class="badge bg-success">Replied</span>';
                        
                        // Disable reply button
                        var replyBtn = row.querySelector('.reply-btn');
                        replyBtn.disabled = true;
                        replyBtn.classList.add('disabled');
                    } else {
                        alert('Failed to submit reply: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while submitting the reply. Please try again later.');
                });
            });

            // Handle delete button click
            document.querySelectorAll('.delete-btn').forEach(function(button) {
                button.addEventListener('click', function() {
                    var commentId = this.getAttribute('data-comment-id');
                    var commentContent = this.closest('tr').querySelector('td:nth-child(2)').textContent;
                    
                    if (confirm('Are you sure you want to delete this comment?\n\nContent: ' + commentContent)) {
                        fetch('@Url.Action("Delete")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            },
                            body: new URLSearchParams({
                                'id': commentId
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // Remove row without reload
                                var row = this.closest('tr');
                                row.style.transition = 'all 0.3s ease';
                                row.style.opacity = '0';
                                setTimeout(() => {
                                    row.remove();
                                    
                                    // Check if table is empty
                                    var tbody = document.querySelector('table tbody');
                                    if (tbody.children.length === 0) {
                                        tbody.innerHTML = '<tr><td colspan="7" class="text-center">No comments found</td></tr>';
                                    }
                                }, 300);
                            } else {
                                alert('Failed to delete comment: ' + data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while deleting the comment.');
                        });
                    }
                });
            });
        });
    </script>
}
