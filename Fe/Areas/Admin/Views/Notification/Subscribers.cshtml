@model List<Fe.DTOs.Notification.UserNotificationDto>

@{
    ViewData["Title"] = "Manage Notifications";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h2 class="mb-4">Send Notification to Subscribed Users</h2>

    <!-- ✅ Bootstrap Alert for Result -->
    <div id="resultAlert" class="alert d-none" role="alert"></div>

    <!-- ✅ Form to Send Bulk Notification -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="bulkNotificationForm">
                <div class="row">
                    <div class="col-md-5 mb-3">
                        <label class="form-label">Title</label>
                        <input name="Title" class="form-control" required />
                    </div>
                    <div class="col-md-5 mb-3">
                        <label class="form-label">Message</label>
                        <input name="Message" class="form-control" required />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="submit" class="btn btn-primary w-100">Send</button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- ✅ New Button: Send Latest Campaign Notification -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="latestCampaignForm">
                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-warning">
                        Send Notification for Latest Campaign
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- ✅ List of Subscribed Users -->
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Subscribed Users</h5>
            <table class="table table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Account ID</th>
                        <th>Title</th>
                        <th>Message</th>
                        <th>Created At</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.AccountId</td>
                            <td>@item.Title</td>
                            <td>@item.Message</td>
                            <td>@item.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>
                                @if (item.IsRead)
                                {
                                    <span class="badge bg-success">Read</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Unread</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Existing form: send custom notification
        document.getElementById('bulkNotificationForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            const form = e.target;
            const formData = new FormData(form);

            const payload = {
                title: formData.get('Title'),
                message: formData.get('Message')
            };

            try {
                const response = await fetch('/Admin/Notification/SendBulk', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                const alert = document.getElementById('resultAlert');

                alert.classList.remove('d-none', 'alert-success', 'alert-danger');
                alert.classList.add(result.success ? 'alert-success' : 'alert-danger');
                alert.textContent = result.message;

                if (result.success) {
                    form.reset();
                }
            } catch (error) {
                const alert = document.getElementById('resultAlert');
                alert.classList.remove('d-none');
                alert.classList.add('alert-danger');
                alert.textContent = 'An error occurred while sending the notification.';
            }
        });

        // New form: send latest campaign notification
        document.getElementById('latestCampaignForm').addEventListener('submit', async function (e) {
            e.preventDefault();

            try {
                const response = await fetch('/Admin/Notification/SendLatestCampaign', {
                    method: 'POST'
                });

                const result = await response.json();
                const alert = document.getElementById('resultAlert');

                alert.classList.remove('d-none', 'alert-success', 'alert-danger');
                alert.classList.add(result.success ? 'alert-success' : 'alert-danger');
                alert.textContent = result.message;
            } catch (error) {
                const alert = document.getElementById('resultAlert');
                alert.classList.remove('d-none');
                alert.classList.add('alert-danger');
                alert.textContent = 'An error occurred while sending the latest campaign.';
            }
        });
    </script>
}
